frameworkVersion: "^2.11.1"

service: bibliophile

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-west-1
  # Opt in to version 3 behavior eagerly
  # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
  apiGateway:
    shouldStartNameWithService: true

package:
  exclude:
    # Exclude everything by default
    # We only want to release a few modules, *not* the frontend, dev config, etc.
    - "./**"
  include:
    # Include just the functions themselves, *not* tests
    - "lambda_functions/*py"
    # Package the license & readme for good measure
    - "LICENSE.md"
    - "README.md"

custom:
  pythonRequirements:
    # When deploying the image for the lambda function, use a Docker container.
    # This is required because certain dependencies (`xml` & `grequests`) are C-based.
    # We must compile some binaries and cannot simply publish Python source
    dockerizePip: true
    # Instead of looking at `requirements.txt`, generate that file using `poetry export`
    usePoetry: true

  customDomain:
    domainName: "api.dcain.me"
    certificateName: "dcain.me"
    # All functions deployed to the domain name will be prefixed with this path.
    # (For example, we'll have a function at https://api.dcain.me/bibliophile/read_shelf)
    basePath: "bibliophile"
    stage: ${self:provider.stage}
    createRoute53Record: true

functions:
  readShelf:
    handler: lambda_functions.read_shelf.handler
    memorySize: 256
    timeout: 30
    events:
      - http:
          path: read_shelf
          method: post
          # We call this method on api.dcain.me from biblio.dcain.me
          # We need to allow cross-origin requests for POSTs.
          cors: true
    environment:
      GOODREADS_DEV_KEY: "${env:GOODREADS_DEV_KEY}"
  searchCatalog:
    handler: lambda_functions.search_catalog.handler
    memorySize: 256
    timeout: 30
    events:
      - http:
          path: search_catalog
          method: post
          # We call this method on api.dcain.me from biblio.dcain.me
          # We need to allow cross-origin requests for POSTs.
          cors: true

plugins:
  # This plugin allows us to include Python dependencies in the lambda function
  # See `pythonRequirements`
  - serverless-python-requirements
  # This allows us to put the lambda functions behind a publicly accessible domain
  # (We can invoke `api.dcain.me/<RouteName>` directly)
  # See `customDomain`
  - serverless-domain-manager
